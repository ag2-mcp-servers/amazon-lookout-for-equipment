# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:30:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AmazonResourceArn(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class Boolean(RootModel[bool]):
    root: bool


class BoundedLengthString(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{1,5000}', min_length=1, max_length=5000)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,5000}', min_length=1, max_length=5000)


class Comments(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{1,2560}', min_length=1, max_length=2560)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,2560}', min_length=1, max_length=2560)


class ComponentName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._\-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._\-]{1,200}$', min_length=1, max_length=200)


class ComponentTimestampDelimiter(
    RootModel[constr(pattern=r'^(\-|\_|\s)?$', min_length=0, max_length=1)]
):
    root: constr(pattern=r'^(\-|\_|\s)?$', min_length=0, max_length=1)


class ConflictException(RootModel[Any]):
    root: Any


class DataDelayOffsetInMinutes(RootModel[conint(ge=0, le=60)]):
    root: conint(ge=0, le=60)


class DataSizeInBytes(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class DataUploadFrequency(Enum):
    PT5M = 'PT5M'
    PT10M = 'PT10M'
    PT15M = 'PT15M'
    PT30M = 'PT30M'
    PT1H = 'PT1H'


class DatasetArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:dataset\/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:dataset\/.+',
        min_length=20,
        max_length=2048,
    )


class DatasetIdentifier(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)


class DatasetName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)


class DatasetStatus(Enum):
    CREATED = 'CREATED'
    INGESTION_IN_PROGRESS = 'INGESTION_IN_PROGRESS'
    ACTIVE = 'ACTIVE'


class DeleteDatasetRequest(BaseModel):
    DatasetName: DatasetIdentifier


class DescribeDatasetRequest(BaseModel):
    DatasetName: DatasetIdentifier


class Equipment(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{1,200}', min_length=1, max_length=200)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,200}', min_length=1, max_length=200)


class EventDurationInSeconds(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class FaultCode(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{1,100}', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,100}', min_length=1, max_length=100)


class FaultCodes(RootModel[List[FaultCode]]):
    root: List[FaultCode] = Field(..., max_length=50, min_length=0)


class FileNameTimestampFormat(
    RootModel[constr(pattern=r'^EPOCH|yyyy-MM-dd-HH-mm-ss|yyyyMMddHHmmss$')]
):
    root: constr(pattern=r'^EPOCH|yyyy-MM-dd-HH-mm-ss|yyyyMMddHHmmss$')


class Float(RootModel[float]):
    root: float


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
        min_length=20,
        max_length=2048,
    )


class IdempotenceToken(
    RootModel[constr(pattern=r'\p{ASCII}{1,256}', min_length=1, max_length=256)]
):
    root: constr(pattern=r'\p{ASCII}{1,256}', min_length=1, max_length=256)


class InferenceExecutionStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class InferenceInputNameConfiguration(BaseModel):
    ComponentTimestampDelimiter_1: Optional[ComponentTimestampDelimiter] = Field(
        None, alias='ComponentTimestampDelimiter'
    )
    TimestampFormat: Optional[FileNameTimestampFormat] = None


class InferenceSchedulerArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:inference-scheduler\/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:inference-scheduler\/.+',
        min_length=20,
        max_length=2048,
    )


class InferenceSchedulerIdentifier(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)


class InferenceSchedulerName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)


class InferenceSchedulerStatus(Enum):
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    STOPPING = 'STOPPING'
    STOPPED = 'STOPPED'


class IngestionJobId(RootModel[constr(pattern=r'[A-Fa-f0-9]{0,32}', max_length=32)]):
    root: constr(pattern=r'[A-Fa-f0-9]{0,32}', max_length=32)


class IngestionJobStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class InlineDataSchema(RootModel[constr(min_length=1, max_length=1000000)]):
    root: constr(min_length=1, max_length=1000000)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidSensorData(BaseModel):
    AffectedSensorCount: Integer
    TotalNumberOfInvalidValues: Integer


class KeyPattern(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class KmsKeyArn(
    RootModel[
        constr(
            pattern=r'arn:aws[a-z\-]*:kms:[a-z0-9\-]*:\d{12}:[\w\-\/]+',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws[a-z\-]*:kms:[a-z0-9\-]*:\d{12}:[\w\-\/]+',
        min_length=1,
        max_length=1024,
    )


class LabelGroupArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:label-group\/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:label-group\/.+',
        min_length=20,
        max_length=2048,
    )


class LabelGroupName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)


class LabelId(RootModel[constr(pattern=r'[A-Fa-f0-9]{0,32}', max_length=32)]):
    root: constr(pattern=r'[A-Fa-f0-9]{0,32}', max_length=32)


class LabelRating(Enum):
    ANOMALY = 'ANOMALY'
    NO_ANOMALY = 'NO_ANOMALY'
    NEUTRAL = 'NEUTRAL'


class LatestInferenceResult(Enum):
    ANOMALOUS = 'ANOMALOUS'
    NORMAL = 'NORMAL'


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: AmazonResourceArn


class MaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class MissingCompleteSensorData(BaseModel):
    AffectedSensorCount: Integer


class MissingSensorData(BaseModel):
    AffectedSensorCount: Integer
    TotalNumberOfMissingValues: Integer


class ModelArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:model\/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\-]*:[0-9]{12}:model\/.+',
        min_length=20,
        max_length=2048,
    )


class ModelMetrics(RootModel[constr(min_length=1, max_length=50000)]):
    root: constr(min_length=1, max_length=50000)


class ModelName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z_-]{1,200}$', min_length=1, max_length=200)


class ModelStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class Monotonicity(Enum):
    DECREASING = 'DECREASING'
    INCREASING = 'INCREASING'
    STATIC = 'STATIC'


class NameOrArn(
    RootModel[
        constr(
            pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        min_length=1,
        max_length=2048,
    )


class NextToken(RootModel[constr(pattern=r'\p{ASCII}{0,8192}', max_length=8192)]):
    root: constr(pattern=r'\p{ASCII}{0,8192}', max_length=8192)


class OffCondition(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3Bucket(
    RootModel[
        constr(
            pattern=r'^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$', min_length=3, max_length=63
    )


class S3Key(
    RootModel[
        constr(pattern=r'[\P{M}\p{M}]{1,1024}[^/]$', min_length=1, max_length=1024)
    ]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,1024}[^/]$', min_length=1, max_length=1024)


class S3Object(BaseModel):
    Bucket: S3Bucket
    Key: S3Key


class S3Prefix(
    RootModel[
        constr(
            pattern=r'(^$)|([\u0009\u000A\u000D\u0020-\u00FF]{1,1023}/$)',
            min_length=0,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'(^$)|([\u0009\u000A\u000D\u0020-\u00FF]{1,1023}/$)',
        min_length=0,
        max_length=1024,
    )


class SensorName(
    RootModel[
        constr(pattern=r'^[0-9a-zA-Z:#$.\-_]{1,200}$', min_length=1, max_length=200)
    ]
):
    root: constr(pattern=r'^[0-9a-zA-Z:#$.\-_]{1,200}$', min_length=1, max_length=200)


class SensorsWithShortDateRange(BaseModel):
    AffectedSensorCount: Integer


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class StartDataIngestionJobResponse(BaseModel):
    JobId: Optional[IngestionJobId] = None
    Status: Optional[IngestionJobStatus] = None


class StartInferenceSchedulerRequest(BaseModel):
    InferenceSchedulerName: InferenceSchedulerIdentifier


class StartInferenceSchedulerResponse(BaseModel):
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    Status: Optional[InferenceSchedulerStatus] = None


class StatisticalIssueStatus(Enum):
    POTENTIAL_ISSUE_DETECTED = 'POTENTIAL_ISSUE_DETECTED'
    NO_ISSUE_DETECTED = 'NO_ISSUE_DETECTED'


class StopInferenceSchedulerRequest(BaseModel):
    InferenceSchedulerName: InferenceSchedulerIdentifier


class StopInferenceSchedulerResponse(BaseModel):
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    Status: Optional[InferenceSchedulerStatus] = None


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[constr(pattern=r'[\s\w+-=\.:/@]*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'[\s\w+-=\.:/@]*', min_length=0, max_length=256)


class TargetSamplingRate(Enum):
    PT1S = 'PT1S'
    PT5S = 'PT5S'
    PT10S = 'PT10S'
    PT15S = 'PT15S'
    PT30S = 'PT30S'
    PT1M = 'PT1M'
    PT5M = 'PT5M'
    PT10M = 'PT10M'
    PT15M = 'PT15M'
    PT30M = 'PT30M'
    PT1H = 'PT1H'


class ThrottlingException(RootModel[Any]):
    root: Any


class TimeZoneOffset(RootModel[constr(pattern=r'^(\+|\-)[0-9]{2}\:[0-9]{2}$')]):
    root: constr(pattern=r'^(\+|\-)[0-9]{2}\:[0-9]{2}$')


class Timestamp(RootModel[datetime]):
    root: datetime


class UnsupportedTimestamps(BaseModel):
    TotalNumberOfUnsupportedTimestamps: Integer


class UntagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateLabelGroupRequest(BaseModel):
    FaultCodes_1: Optional[FaultCodes] = Field(None, alias='FaultCodes')
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    AWSLookoutEquipmentFrontendService_CreateDataset = (
        'AWSLookoutEquipmentFrontendService.CreateDataset'
    )


class XAmzTarget1(Enum):
    AWSLookoutEquipmentFrontendService_CreateInferenceScheduler = (
        'AWSLookoutEquipmentFrontendService.CreateInferenceScheduler'
    )


class XAmzTarget2(Enum):
    AWSLookoutEquipmentFrontendService_CreateLabel = (
        'AWSLookoutEquipmentFrontendService.CreateLabel'
    )


class XAmzTarget3(Enum):
    AWSLookoutEquipmentFrontendService_CreateLabelGroup = (
        'AWSLookoutEquipmentFrontendService.CreateLabelGroup'
    )


class XAmzTarget4(Enum):
    AWSLookoutEquipmentFrontendService_CreateModel = (
        'AWSLookoutEquipmentFrontendService.CreateModel'
    )


class XAmzTarget5(Enum):
    AWSLookoutEquipmentFrontendService_DeleteDataset = (
        'AWSLookoutEquipmentFrontendService.DeleteDataset'
    )


class XAmzTarget6(Enum):
    AWSLookoutEquipmentFrontendService_DeleteInferenceScheduler = (
        'AWSLookoutEquipmentFrontendService.DeleteInferenceScheduler'
    )


class XAmzTarget7(Enum):
    AWSLookoutEquipmentFrontendService_DeleteLabel = (
        'AWSLookoutEquipmentFrontendService.DeleteLabel'
    )


class XAmzTarget8(Enum):
    AWSLookoutEquipmentFrontendService_DeleteLabelGroup = (
        'AWSLookoutEquipmentFrontendService.DeleteLabelGroup'
    )


class XAmzTarget9(Enum):
    AWSLookoutEquipmentFrontendService_DeleteModel = (
        'AWSLookoutEquipmentFrontendService.DeleteModel'
    )


class XAmzTarget10(Enum):
    AWSLookoutEquipmentFrontendService_DescribeDataIngestionJob = (
        'AWSLookoutEquipmentFrontendService.DescribeDataIngestionJob'
    )


class XAmzTarget11(Enum):
    AWSLookoutEquipmentFrontendService_DescribeDataset = (
        'AWSLookoutEquipmentFrontendService.DescribeDataset'
    )


class XAmzTarget12(Enum):
    AWSLookoutEquipmentFrontendService_DescribeInferenceScheduler = (
        'AWSLookoutEquipmentFrontendService.DescribeInferenceScheduler'
    )


class XAmzTarget13(Enum):
    AWSLookoutEquipmentFrontendService_DescribeLabel = (
        'AWSLookoutEquipmentFrontendService.DescribeLabel'
    )


class XAmzTarget14(Enum):
    AWSLookoutEquipmentFrontendService_DescribeLabelGroup = (
        'AWSLookoutEquipmentFrontendService.DescribeLabelGroup'
    )


class XAmzTarget15(Enum):
    AWSLookoutEquipmentFrontendService_DescribeModel = (
        'AWSLookoutEquipmentFrontendService.DescribeModel'
    )


class XAmzTarget16(Enum):
    AWSLookoutEquipmentFrontendService_ListDataIngestionJobs = (
        'AWSLookoutEquipmentFrontendService.ListDataIngestionJobs'
    )


class XAmzTarget17(Enum):
    AWSLookoutEquipmentFrontendService_ListDatasets = (
        'AWSLookoutEquipmentFrontendService.ListDatasets'
    )


class XAmzTarget18(Enum):
    AWSLookoutEquipmentFrontendService_ListInferenceEvents = (
        'AWSLookoutEquipmentFrontendService.ListInferenceEvents'
    )


class XAmzTarget19(Enum):
    AWSLookoutEquipmentFrontendService_ListInferenceExecutions = (
        'AWSLookoutEquipmentFrontendService.ListInferenceExecutions'
    )


class XAmzTarget20(Enum):
    AWSLookoutEquipmentFrontendService_ListInferenceSchedulers = (
        'AWSLookoutEquipmentFrontendService.ListInferenceSchedulers'
    )


class XAmzTarget21(Enum):
    AWSLookoutEquipmentFrontendService_ListLabelGroups = (
        'AWSLookoutEquipmentFrontendService.ListLabelGroups'
    )


class XAmzTarget22(Enum):
    AWSLookoutEquipmentFrontendService_ListLabels = (
        'AWSLookoutEquipmentFrontendService.ListLabels'
    )


class XAmzTarget23(Enum):
    AWSLookoutEquipmentFrontendService_ListModels = (
        'AWSLookoutEquipmentFrontendService.ListModels'
    )


class XAmzTarget24(Enum):
    AWSLookoutEquipmentFrontendService_ListSensorStatistics = (
        'AWSLookoutEquipmentFrontendService.ListSensorStatistics'
    )


class XAmzTarget25(Enum):
    AWSLookoutEquipmentFrontendService_ListTagsForResource = (
        'AWSLookoutEquipmentFrontendService.ListTagsForResource'
    )


class XAmzTarget26(Enum):
    AWSLookoutEquipmentFrontendService_StartDataIngestionJob = (
        'AWSLookoutEquipmentFrontendService.StartDataIngestionJob'
    )


class XAmzTarget27(Enum):
    AWSLookoutEquipmentFrontendService_StartInferenceScheduler = (
        'AWSLookoutEquipmentFrontendService.StartInferenceScheduler'
    )


class XAmzTarget28(Enum):
    AWSLookoutEquipmentFrontendService_StopInferenceScheduler = (
        'AWSLookoutEquipmentFrontendService.StopInferenceScheduler'
    )


class XAmzTarget29(Enum):
    AWSLookoutEquipmentFrontendService_TagResource = (
        'AWSLookoutEquipmentFrontendService.TagResource'
    )


class XAmzTarget30(Enum):
    AWSLookoutEquipmentFrontendService_UntagResource = (
        'AWSLookoutEquipmentFrontendService.UntagResource'
    )


class XAmzTarget31(Enum):
    AWSLookoutEquipmentFrontendService_UpdateInferenceScheduler = (
        'AWSLookoutEquipmentFrontendService.UpdateInferenceScheduler'
    )


class XAmzTarget32(Enum):
    AWSLookoutEquipmentFrontendService_UpdateLabelGroup = (
        'AWSLookoutEquipmentFrontendService.UpdateLabelGroup'
    )


class CategoricalValues(BaseModel):
    NumberOfCategory: Optional[Integer] = None
    Status: StatisticalIssueStatus


class CountPercent(BaseModel):
    Count: Integer
    Percentage: Float


class CreateDatasetResponse(BaseModel):
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    Status: Optional[DatasetStatus] = None


class CreateInferenceSchedulerResponse(BaseModel):
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )
    Status: Optional[InferenceSchedulerStatus] = None


class CreateLabelGroupResponse(BaseModel):
    LabelGroupArn_1: Optional[LabelGroupArn] = Field(None, alias='LabelGroupArn')
    LabelGroupName_1: Optional[LabelGroupName] = Field(None, alias='LabelGroupName')


class CreateLabelRequest(BaseModel):
    ClientToken: IdempotenceToken
    EndTime: Timestamp
    Equipment_1: Optional[Equipment] = Field(None, alias='Equipment')
    FaultCode_1: Optional[FaultCode] = Field(None, alias='FaultCode')
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')
    Notes: Optional[Comments] = None
    Rating: LabelRating
    StartTime: Timestamp


class CreateLabelResponse(BaseModel):
    LabelId_1: Optional[LabelId] = Field(None, alias='LabelId')


class CreateModelResponse(BaseModel):
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    Status: Optional[ModelStatus] = None


class DataPreProcessingConfiguration(BaseModel):
    TargetSamplingRate_1: Optional[TargetSamplingRate] = Field(
        None, alias='TargetSamplingRate'
    )


class DatasetSchema(BaseModel):
    InlineDataSchema_1: Optional[InlineDataSchema] = Field(
        None, alias='InlineDataSchema'
    )


class DatasetSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    Status: Optional[DatasetStatus] = None


class DeleteInferenceSchedulerRequest(BaseModel):
    InferenceSchedulerName: InferenceSchedulerIdentifier


class DeleteLabelGroupRequest(BaseModel):
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')


class DeleteLabelRequest(BaseModel):
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')
    LabelId_1: LabelId = Field(..., alias='LabelId')


class DeleteModelRequest(BaseModel):
    ModelName_1: ModelName = Field(..., alias='ModelName')


class DescribeDataIngestionJobRequest(BaseModel):
    JobId: IngestionJobId


class DescribeInferenceSchedulerRequest(BaseModel):
    InferenceSchedulerName: InferenceSchedulerIdentifier


class DescribeLabelGroupRequest(BaseModel):
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')


class DescribeLabelGroupResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    FaultCodes_1: Optional[FaultCodes] = Field(None, alias='FaultCodes')
    LabelGroupArn_1: Optional[LabelGroupArn] = Field(None, alias='LabelGroupArn')
    LabelGroupName_1: Optional[LabelGroupName] = Field(None, alias='LabelGroupName')
    UpdatedAt: Optional[Timestamp] = None


class DescribeLabelRequest(BaseModel):
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')
    LabelId_1: LabelId = Field(..., alias='LabelId')


class DescribeLabelResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    EndTime: Optional[Timestamp] = None
    Equipment_1: Optional[Equipment] = Field(None, alias='Equipment')
    FaultCode_1: Optional[FaultCode] = Field(None, alias='FaultCode')
    LabelGroupArn_1: Optional[LabelGroupArn] = Field(None, alias='LabelGroupArn')
    LabelGroupName_1: Optional[LabelGroupName] = Field(None, alias='LabelGroupName')
    LabelId_1: Optional[LabelId] = Field(None, alias='LabelId')
    Notes: Optional[Comments] = None
    Rating: Optional[LabelRating] = None
    StartTime: Optional[Timestamp] = None


class DescribeModelRequest(BaseModel):
    ModelName_1: ModelName = Field(..., alias='ModelName')


class DuplicateTimestamps(BaseModel):
    TotalNumberOfDuplicateTimestamps: Integer


class InferenceEventSummary(BaseModel):
    Diagnostics: Optional[ModelMetrics] = None
    EventDurationInSeconds_1: Optional[EventDurationInSeconds] = Field(
        None, alias='EventDurationInSeconds'
    )
    EventEndTime: Optional[Timestamp] = None
    EventStartTime: Optional[Timestamp] = None
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )


class InferenceS3InputConfiguration(BaseModel):
    Bucket: S3Bucket
    Prefix: Optional[S3Prefix] = None


class InferenceS3OutputConfiguration(BaseModel):
    Bucket: S3Bucket
    Prefix: Optional[S3Prefix] = None


class InferenceSchedulerSummary(BaseModel):
    DataDelayOffsetInMinutes_1: Optional[DataDelayOffsetInMinutes] = Field(
        None, alias='DataDelayOffsetInMinutes'
    )
    DataUploadFrequency_1: Optional[DataUploadFrequency] = Field(
        None, alias='DataUploadFrequency'
    )
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )
    LatestInferenceResult_1: Optional[LatestInferenceResult] = Field(
        None, alias='LatestInferenceResult'
    )
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    Status: Optional[InferenceSchedulerStatus] = None


class IngestionS3InputConfiguration(BaseModel):
    Bucket: S3Bucket
    KeyPattern_1: Optional[KeyPattern] = Field(None, alias='KeyPattern')
    Prefix: Optional[S3Prefix] = None


class InsufficientSensorData(BaseModel):
    MissingCompleteSensorData_1: MissingCompleteSensorData = Field(
        ..., alias='MissingCompleteSensorData'
    )
    SensorsWithShortDateRange_1: SensorsWithShortDateRange = Field(
        ..., alias='SensorsWithShortDateRange'
    )


class LabelGroupSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    LabelGroupArn_1: Optional[LabelGroupArn] = Field(None, alias='LabelGroupArn')
    LabelGroupName_1: Optional[LabelGroupName] = Field(None, alias='LabelGroupName')
    UpdatedAt: Optional[Timestamp] = None


class LabelSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    EndTime: Optional[Timestamp] = None
    Equipment_1: Optional[Equipment] = Field(None, alias='Equipment')
    FaultCode_1: Optional[FaultCode] = Field(None, alias='FaultCode')
    LabelGroupArn_1: Optional[LabelGroupArn] = Field(None, alias='LabelGroupArn')
    LabelGroupName_1: Optional[LabelGroupName] = Field(None, alias='LabelGroupName')
    LabelId_1: Optional[LabelId] = Field(None, alias='LabelId')
    Rating: Optional[LabelRating] = None
    StartTime: Optional[Timestamp] = None


class LabelsS3InputConfiguration(BaseModel):
    Bucket: S3Bucket
    Prefix: Optional[S3Prefix] = None


class LargeTimestampGaps(BaseModel):
    MaxTimestampGapInDays: Optional[Integer] = None
    NumberOfLargeTimestampGaps: Optional[Integer] = None
    Status: StatisticalIssueStatus


class ListDataIngestionJobsRequest(BaseModel):
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[IngestionJobStatus] = None


class ListDatasetsRequest(BaseModel):
    DatasetNameBeginsWith: Optional[DatasetName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceEventsRequest(BaseModel):
    InferenceSchedulerName: InferenceSchedulerIdentifier
    IntervalEndTime: Timestamp
    IntervalStartTime: Timestamp
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceExecutionsRequest(BaseModel):
    DataEndTimeBefore: Optional[Timestamp] = None
    DataStartTimeAfter: Optional[Timestamp] = None
    InferenceSchedulerName: InferenceSchedulerIdentifier
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[InferenceExecutionStatus] = None


class ListInferenceSchedulersRequest(BaseModel):
    InferenceSchedulerNameBeginsWith: Optional[InferenceSchedulerIdentifier] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[InferenceSchedulerStatus] = None


class ListLabelGroupsRequest(BaseModel):
    LabelGroupNameBeginsWith: Optional[LabelGroupName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLabelsRequest(BaseModel):
    Equipment_1: Optional[Equipment] = Field(None, alias='Equipment')
    FaultCode_1: Optional[FaultCode] = Field(None, alias='FaultCode')
    IntervalEndTime: Optional[Timestamp] = None
    IntervalStartTime: Optional[Timestamp] = None
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListModelsRequest(BaseModel):
    DatasetNameBeginsWith: Optional[DatasetName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    ModelNameBeginsWith: Optional[ModelName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[ModelStatus] = None


class ListOfDiscardedFiles(RootModel[List[S3Object]]):
    root: List[S3Object] = Field(..., min_length=0)


class ListSensorStatisticsRequest(BaseModel):
    DatasetName_1: DatasetName = Field(..., alias='DatasetName')
    IngestionJobId_1: Optional[IngestionJobId] = Field(None, alias='IngestionJobId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ModelSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    Status: Optional[ModelStatus] = None


class MonotonicValues(BaseModel):
    Monotonicity_1: Optional[Monotonicity] = Field(None, alias='Monotonicity')
    Status: StatisticalIssueStatus


class MultipleOperatingModes(BaseModel):
    Status: StatisticalIssueStatus


class SensorStatisticsSummary(BaseModel):
    CategoricalValues_1: Optional[CategoricalValues] = Field(
        None, alias='CategoricalValues'
    )
    ComponentName_1: Optional[ComponentName] = Field(None, alias='ComponentName')
    DataEndTime: Optional[Timestamp] = None
    DataExists: Optional[Boolean] = None
    DataStartTime: Optional[Timestamp] = None
    DuplicateTimestamps: Optional[CountPercent] = None
    InvalidDateEntries: Optional[CountPercent] = None
    InvalidValues: Optional[CountPercent] = None
    LargeTimestampGaps_1: Optional[LargeTimestampGaps] = Field(
        None, alias='LargeTimestampGaps'
    )
    MissingValues: Optional[CountPercent] = None
    MonotonicValues_1: Optional[MonotonicValues] = Field(None, alias='MonotonicValues')
    MultipleOperatingModes_1: Optional[MultipleOperatingModes] = Field(
        None, alias='MultipleOperatingModes'
    )
    SensorName_1: Optional[SensorName] = Field(None, alias='SensorName')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceArn: AmazonResourceArn
    Tags: TagList


class CreateDatasetRequest(BaseModel):
    ClientToken: IdempotenceToken
    DatasetName_1: DatasetName = Field(..., alias='DatasetName')
    DatasetSchema_1: Optional[DatasetSchema] = Field(None, alias='DatasetSchema')
    ServerSideKmsKeyId: Optional[NameOrArn] = None
    Tags: Optional[TagList] = None


class CreateLabelGroupRequest(BaseModel):
    ClientToken: IdempotenceToken
    FaultCodes_1: Optional[FaultCodes] = Field(None, alias='FaultCodes')
    LabelGroupName_1: LabelGroupName = Field(..., alias='LabelGroupName')
    Tags: Optional[TagList] = None


class DataQualitySummary(BaseModel):
    DuplicateTimestamps_1: DuplicateTimestamps = Field(..., alias='DuplicateTimestamps')
    InsufficientSensorData_1: InsufficientSensorData = Field(
        ..., alias='InsufficientSensorData'
    )
    InvalidSensorData_1: InvalidSensorData = Field(..., alias='InvalidSensorData')
    MissingSensorData_1: MissingSensorData = Field(..., alias='MissingSensorData')
    UnsupportedTimestamps_1: UnsupportedTimestamps = Field(
        ..., alias='UnsupportedTimestamps'
    )


class DatasetSummaries(RootModel[List[DatasetSummary]]):
    root: List[DatasetSummary]


class InferenceEventSummaries(RootModel[List[InferenceEventSummary]]):
    root: List[InferenceEventSummary]


class InferenceInputConfiguration(BaseModel):
    InferenceInputNameConfiguration_1: Optional[InferenceInputNameConfiguration] = (
        Field(None, alias='InferenceInputNameConfiguration')
    )
    InputTimeZoneOffset: Optional[TimeZoneOffset] = None
    S3InputConfiguration: Optional[InferenceS3InputConfiguration] = None


class InferenceOutputConfiguration(BaseModel):
    KmsKeyId: Optional[NameOrArn] = None
    S3OutputConfiguration: InferenceS3OutputConfiguration


class InferenceSchedulerSummaries(RootModel[List[InferenceSchedulerSummary]]):
    root: List[InferenceSchedulerSummary]


class IngestedFilesSummary(BaseModel):
    DiscardedFiles: Optional[ListOfDiscardedFiles] = None
    IngestedNumberOfFiles: Integer
    TotalNumberOfFiles: Integer


class IngestionInputConfiguration(BaseModel):
    S3InputConfiguration: IngestionS3InputConfiguration


class LabelGroupSummaries(RootModel[List[LabelGroupSummary]]):
    root: List[LabelGroupSummary]


class LabelSummaries(RootModel[List[LabelSummary]]):
    root: List[LabelSummary]


class LabelsInputConfiguration(BaseModel):
    LabelGroupName_1: Optional[LabelGroupName] = Field(None, alias='LabelGroupName')
    S3InputConfiguration: Optional[LabelsS3InputConfiguration] = None


class ListDatasetsResponse(BaseModel):
    DatasetSummaries_1: Optional[DatasetSummaries] = Field(
        None, alias='DatasetSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceEventsResponse(BaseModel):
    InferenceEventSummaries_1: Optional[InferenceEventSummaries] = Field(
        None, alias='InferenceEventSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceSchedulersResponse(BaseModel):
    InferenceSchedulerSummaries_1: Optional[InferenceSchedulerSummaries] = Field(
        None, alias='InferenceSchedulerSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLabelGroupsResponse(BaseModel):
    LabelGroupSummaries_1: Optional[LabelGroupSummaries] = Field(
        None, alias='LabelGroupSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLabelsResponse(BaseModel):
    LabelSummaries_1: Optional[LabelSummaries] = Field(None, alias='LabelSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ModelSummaries(RootModel[List[ModelSummary]]):
    root: List[ModelSummary]


class SensorStatisticsSummaries(RootModel[List[SensorStatisticsSummary]]):
    root: List[SensorStatisticsSummary]


class StartDataIngestionJobRequest(BaseModel):
    ClientToken: IdempotenceToken
    DatasetName: DatasetIdentifier
    IngestionInputConfiguration_1: IngestionInputConfiguration = Field(
        ..., alias='IngestionInputConfiguration'
    )
    RoleArn: IamRoleArn


class UpdateInferenceSchedulerRequest(BaseModel):
    DataDelayOffsetInMinutes_1: Optional[DataDelayOffsetInMinutes] = Field(
        None, alias='DataDelayOffsetInMinutes'
    )
    DataInputConfiguration: Optional[InferenceInputConfiguration] = None
    DataOutputConfiguration: Optional[InferenceOutputConfiguration] = None
    DataUploadFrequency_1: Optional[DataUploadFrequency] = Field(
        None, alias='DataUploadFrequency'
    )
    InferenceSchedulerName: InferenceSchedulerIdentifier
    RoleArn: Optional[IamRoleArn] = None


class CreateInferenceSchedulerRequest(BaseModel):
    ClientToken: IdempotenceToken
    DataDelayOffsetInMinutes_1: Optional[DataDelayOffsetInMinutes] = Field(
        None, alias='DataDelayOffsetInMinutes'
    )
    DataInputConfiguration: InferenceInputConfiguration
    DataOutputConfiguration: InferenceOutputConfiguration
    DataUploadFrequency_1: DataUploadFrequency = Field(..., alias='DataUploadFrequency')
    InferenceSchedulerName_1: InferenceSchedulerName = Field(
        ..., alias='InferenceSchedulerName'
    )
    ModelName_1: ModelName = Field(..., alias='ModelName')
    RoleArn: IamRoleArn
    ServerSideKmsKeyId: Optional[NameOrArn] = None
    Tags: Optional[TagList] = None


class CreateModelRequest(BaseModel):
    ClientToken: IdempotenceToken
    DataPreProcessingConfiguration_1: Optional[DataPreProcessingConfiguration] = Field(
        None, alias='DataPreProcessingConfiguration'
    )
    DatasetName: DatasetIdentifier
    DatasetSchema_1: Optional[DatasetSchema] = Field(None, alias='DatasetSchema')
    EvaluationDataEndTime: Optional[Timestamp] = None
    EvaluationDataStartTime: Optional[Timestamp] = None
    LabelsInputConfiguration_1: Optional[LabelsInputConfiguration] = Field(
        None, alias='LabelsInputConfiguration'
    )
    ModelName_1: ModelName = Field(..., alias='ModelName')
    OffCondition_1: Optional[OffCondition] = Field(None, alias='OffCondition')
    RoleArn: Optional[IamRoleArn] = None
    ServerSideKmsKeyId: Optional[NameOrArn] = None
    Tags: Optional[TagList] = None
    TrainingDataEndTime: Optional[Timestamp] = None
    TrainingDataStartTime: Optional[Timestamp] = None


class DataIngestionJobSummary(BaseModel):
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    IngestionInputConfiguration_1: Optional[IngestionInputConfiguration] = Field(
        None, alias='IngestionInputConfiguration'
    )
    JobId: Optional[IngestionJobId] = None
    Status: Optional[IngestionJobStatus] = None


class DescribeDataIngestionJobResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DataEndTime: Optional[Timestamp] = None
    DataQualitySummary_1: Optional[DataQualitySummary] = Field(
        None, alias='DataQualitySummary'
    )
    DataStartTime: Optional[Timestamp] = None
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    FailedReason: Optional[BoundedLengthString] = None
    IngestedDataSize: Optional[DataSizeInBytes] = None
    IngestedFilesSummary_1: Optional[IngestedFilesSummary] = Field(
        None, alias='IngestedFilesSummary'
    )
    IngestionInputConfiguration_1: Optional[IngestionInputConfiguration] = Field(
        None, alias='IngestionInputConfiguration'
    )
    JobId: Optional[IngestionJobId] = None
    RoleArn: Optional[IamRoleArn] = None
    Status: Optional[IngestionJobStatus] = None
    StatusDetail: Optional[BoundedLengthString] = None


class DescribeDatasetResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DataEndTime: Optional[Timestamp] = None
    DataQualitySummary_1: Optional[DataQualitySummary] = Field(
        None, alias='DataQualitySummary'
    )
    DataStartTime: Optional[Timestamp] = None
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    IngestedFilesSummary_1: Optional[IngestedFilesSummary] = Field(
        None, alias='IngestedFilesSummary'
    )
    IngestionInputConfiguration_1: Optional[IngestionInputConfiguration] = Field(
        None, alias='IngestionInputConfiguration'
    )
    LastUpdatedAt: Optional[Timestamp] = None
    RoleArn: Optional[IamRoleArn] = None
    Schema: Optional[InlineDataSchema] = None
    ServerSideKmsKeyId: Optional[KmsKeyArn] = None
    Status: Optional[DatasetStatus] = None


class DescribeInferenceSchedulerResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DataDelayOffsetInMinutes_1: Optional[DataDelayOffsetInMinutes] = Field(
        None, alias='DataDelayOffsetInMinutes'
    )
    DataInputConfiguration: Optional[InferenceInputConfiguration] = None
    DataOutputConfiguration: Optional[InferenceOutputConfiguration] = None
    DataUploadFrequency_1: Optional[DataUploadFrequency] = Field(
        None, alias='DataUploadFrequency'
    )
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )
    LatestInferenceResult_1: Optional[LatestInferenceResult] = Field(
        None, alias='LatestInferenceResult'
    )
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    RoleArn: Optional[IamRoleArn] = None
    ServerSideKmsKeyId: Optional[KmsKeyArn] = None
    Status: Optional[InferenceSchedulerStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class DescribeModelResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    DataPreProcessingConfiguration_1: Optional[DataPreProcessingConfiguration] = Field(
        None, alias='DataPreProcessingConfiguration'
    )
    DatasetArn_1: Optional[DatasetArn] = Field(None, alias='DatasetArn')
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    EvaluationDataEndTime: Optional[Timestamp] = None
    EvaluationDataStartTime: Optional[Timestamp] = None
    FailedReason: Optional[BoundedLengthString] = None
    LabelsInputConfiguration_1: Optional[LabelsInputConfiguration] = Field(
        None, alias='LabelsInputConfiguration'
    )
    LastUpdatedTime: Optional[Timestamp] = None
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelMetrics_1: Optional[ModelMetrics] = Field(None, alias='ModelMetrics')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    OffCondition_1: Optional[OffCondition] = Field(None, alias='OffCondition')
    RoleArn: Optional[IamRoleArn] = None
    Schema: Optional[InlineDataSchema] = None
    ServerSideKmsKeyId: Optional[KmsKeyArn] = None
    Status: Optional[ModelStatus] = None
    TrainingDataEndTime: Optional[Timestamp] = None
    TrainingDataStartTime: Optional[Timestamp] = None
    TrainingExecutionEndTime: Optional[Timestamp] = None
    TrainingExecutionStartTime: Optional[Timestamp] = None


class InferenceExecutionSummary(BaseModel):
    CustomerResultObject: Optional[S3Object] = None
    DataEndTime: Optional[Timestamp] = None
    DataInputConfiguration: Optional[InferenceInputConfiguration] = None
    DataOutputConfiguration: Optional[InferenceOutputConfiguration] = None
    DataStartTime: Optional[Timestamp] = None
    FailedReason: Optional[BoundedLengthString] = None
    InferenceSchedulerArn_1: Optional[InferenceSchedulerArn] = Field(
        None, alias='InferenceSchedulerArn'
    )
    InferenceSchedulerName_1: Optional[InferenceSchedulerName] = Field(
        None, alias='InferenceSchedulerName'
    )
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    ScheduledStartTime: Optional[Timestamp] = None
    Status: Optional[InferenceExecutionStatus] = None


class ListModelsResponse(BaseModel):
    ModelSummaries_1: Optional[ModelSummaries] = Field(None, alias='ModelSummaries')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSensorStatisticsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SensorStatisticsSummaries_1: Optional[SensorStatisticsSummaries] = Field(
        None, alias='SensorStatisticsSummaries'
    )


class DataIngestionJobSummaries(RootModel[List[DataIngestionJobSummary]]):
    root: List[DataIngestionJobSummary]


class InferenceExecutionSummaries(RootModel[List[InferenceExecutionSummary]]):
    root: List[InferenceExecutionSummary]


class ListDataIngestionJobsResponse(BaseModel):
    DataIngestionJobSummaries_1: Optional[DataIngestionJobSummaries] = Field(
        None, alias='DataIngestionJobSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListInferenceExecutionsResponse(BaseModel):
    InferenceExecutionSummaries_1: Optional[InferenceExecutionSummaries] = Field(
        None, alias='InferenceExecutionSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
